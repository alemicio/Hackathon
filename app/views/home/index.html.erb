<!DOCTYPE html>
<html>
<head>
  <title>Simple Map</title>
  <meta name="viewport" content="initial-scale=1.0">
  <meta charset="utf-8">
  <style>
      html, body {
          height: 100%;
          margin: 0;
          padding: 0;
      }
      #map {
          height: 60%;
          border-radius: 16px 16px;
          border-color: #fff;
          border-style: solid;
          box-shadow: 2px 2px 10px #B1B1B1;
          margin-top: 25px;
          border-width: 7px;
      }
      .controls {
          margin-top: 10px;
          border: 1px solid transparent;
          border-radius: 2px 0 0 2px;
          box-sizing: border-box;
          -moz-box-sizing: border-box;
          height: 32px;
          outline: none;
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #origin-input,
      #destination-input {
          background-color: #fff;
          font-family: Roboto;
          font-size: 15px;
          font-weight: 300;
          margin-left: 12px;
          padding: 0 11px 0 13px;
          text-overflow: ellipsis;
          width: 200px;
      }

      #origin-input:focus,
      #destination-input:focus {
          border-color: #4d90fe;
      }

      #mode-selector {
          color: #fff;
          background-color: #4d90fe;
          margin-left: 12px;
          padding: 5px 11px 0px 11px;
      }

      #mode-selector label {
          font-family: Roboto;
          font-size: 13px;
          font-weight: 300;
      }
  </style>
</head>
<body>

<input id="destination-input" class="controls" type="text"
       placeholder="Enter a destination location">

<!--<div id="mode-selector" class="controls">
  <input type="radio" name="type" id="changemode-walking" checked="checked">
  <label for="changemode-walking">Walking</label>

  <input type="radio" name="type" id="changemode-transit">
  <label for="changemode-transit">Transit</label>

  <input type="radio" name="type" id="changemode-driving">
  <label for="changemode-driving">Driving</label>
</div>-->
<div id="map"></div>

<div class="container">

  <div class="row" id="answer">
    <div class="col-lg-2">
      <h3>Metro from:</h3>
    </div>
    <div class="col-lg-5">
        <p id="metro_departure"> ==>
    </div>
      <div class="col-lg-5">
        <p id="metro_arrival">
      </div>

  </div>

  <div class="row"id="answer">
    <div class="col-lg-2">
      <h3>Rail from:</h3>
    </div>
      <div class="col-lg-5">
        <p id="rail_departure">==>
      </div>
      <div class="col-lg-5">
        <p id="rail_arrival">
      </div>
  </div>

  <div class="row" id="answer">
    <div class="col-2">
      <h3>Tram from:</h3>
    </div>
      <div class="col-lg-6">
        <p id="line_departure">==>
      </div>
      <div class="col-lg-6">
        <p id="line_arrival">
      </div>
    </div>

</div>

<script>

    var initial_location;
    var map = null;
    var markers = [];
    var icon_base = "https://maps.google.com/mapfiles/kml/shapes/";

    function initMap() {

        var origin_place_id = null;
        var destination_place_id = null;
        var travel_mode = google.maps.TravelMode.TRANSIT;

        // Map creation
        var map = new google.maps.Map(document.getElementById('map'), {
            mapTypeControl: false,
            center: {lat: -33.8688, lng: 151.2195},
            zoom: 13
        });

        //=============== Marker creation ===============
        if (navigator.geolocation) {
            browserSupportFlag = true;
            navigator.geolocation.getCurrentPosition(function (position) {

                initial_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                map.setCenter(initial_location);

                // Create a marker and set its position.
                var marker = new google.maps.Marker({
                    map: map,
                    position: initial_location,
                    title: 'CURRENT POSITION',
                    icon: icon_base + 'homegardenbusiness.png'
                });

                markers.push(marker);
            }, function () {

                handleNoGeolocation(browserSupportFlag);
            });
        }
        //===============================================

        // These methods are called in order to create 3 markers corresponding, respectively,
        // to: nearest rails station; nearest metro station; nearest line station
        getNearestRailStation();
        getNearestMetroStation();
        getNearestLineStation();

        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        directionsDisplay.setMap(map);

        var origin_input = document.getElementById('origin-input');
        var destination_input = document.getElementById('destination-input');
        var modes = document.getElementById('mode-selector');

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

        //var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
        //origin_autocomplete.bindTo('bounds', map);
        var destination_autocomplete =
                new google.maps.places.Autocomplete(destination_input);
        destination_autocomplete.bindTo('bounds', map);

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        /*function setupClickListener(id, mode) {
            var radioButton = document.getElementById(id);
            radioButton.addEventListener('click', function () {
                travel_mode = mode;
            });
        }*/

        //setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
        //setupClickListener('changemode-transit', google.maps.TravelMode.TRANSIT);
        //setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

        function expandViewportToFitPlace(map, place) {
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
        }

        // Function triggered since we have defined our destination
        destination_autocomplete.addListener('place_changed', function () {

            resetMap();

            var place = destination_autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            expandViewportToFitPlace(map, place);

            // Create a marker and set its position.
            var destination_marker = new google.maps.Marker({
                map: map,
                position: place.geometry.location,
                title: 'DESTINATION',
                icon: icon_base + 'ranger_station.png'
            });

            markers.push(destination_marker);

            // This ajax call sends a get request to the rails endpoint that will retrieve
            // the rail station nearer to the destination
            $.ajax({
                type: "GET",
                url: "/rail_stations",
                data: { Lat: place.geometry.location.lat(), Lng: place.geometry.location.lng() } ,
                dataType: "json",
                success: function(data)
                {
                    nearest_station_location = new google.maps.LatLng(data.lat, data.lng);

                    // Create a marker and set its position.
                    var rail_marker = new google.maps.Marker({
                        map: map,
                        position: nearest_station_location,
                        title: data.rail_station_name,
                        icon: icon_base + 'rail.png'
                    });

                    markers.push(rail_marker);
                    $("#rail_arrival").text(data.rail_station_name);
                }
            });

            // This ajax call sends a get request to the rails endpoint that will retrieve
            // the metro station nearer to the destination
            $.ajax({
                type: "GET",
                url: "/metro_stations",
                data: { Lat: place.geometry.location.lat(), Lng: place.geometry.location.lng() } ,
                dataType: "json",
                success: function(data)
                {
                    nearest_station_location = new google.maps.LatLng(data.lat, data.lng);

                    // Create a marker and set its position.
                    var metro_marker = new google.maps.Marker({
                        map: map,
                        position: nearest_station_location,
                        title: data.metro_name,
                        icon: icon_base + 'subway.png'
                    });

                    markers.push(metro_marker);
                    $("#metro_arrival").text(data.metro_name);
                }
            });

            // This ajax call sends a get request to the rails endpoint that will retrieve
            // the line station nearer to the destination
            $.ajax({
                type: "GET",
                url: "/urban_lines",
                data: { Lat: place.geometry.location.lat(), Lng: place.geometry.location.lng() } ,
                dataType: "json",
                success: function(data)
                {
                    nearest_station_location = new google.maps.LatLng(data.lat, data.lng);

                    // Create a marker and set its position.
                    var line_marker = new google.maps.Marker({
                        map: map,
                        position: nearest_station_location,
                        title: data.line_station_name,
                        icon: icon_base + 'rec_bus.png'
                    });

                    markers.push(line_marker);
                    $("#line_arrival").text(data.line_station_name);
                }
            });

            /*// If the place has a geometry, store its place ID and route if we have
            // the other place ID
            destination_place_id = place.place_id;
            route(new google.maps.places.Place(latLng).getPlace().place_id, destination_place_id, travel_mode,
                    directionsService, directionsDisplay);*/
        });

        function route(origin_place_id, destination_place_id, travel_mode,
                       directionsService, directionsDisplay) {
            if (!origin_place_id || !destination_place_id) {
                return;
            }
            directionsService.route({
                origin: {'placeId': origin_place_id},
                destination: {'placeId': destination_place_id},
                travelMode: travel_mode
            }, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

      function getNearestLineStation(){

        if (navigator.geolocation) {
          browserSupportFlag = true;
          navigator.geolocation.getCurrentPosition(function (position) {
            initial_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

            $.ajax({
              type: "GET",
              url: "/urban_lines",
              data: { Lat: initial_location.lat(), Lng: initial_location.lng() } ,
              dataType: "json",
              success: function(data)
              {
                nearest_line_location = new google.maps.LatLng(data.lat, data.lng);

                // Create a marker and set its position.
                var line_marker = new google.maps.Marker({
                  map: map,
                  position: nearest_line_location,
                  title: data.line_station_name,
                  icon: icon_base + 'rec_bus.png'
                });

                markers.push(line_marker);
                $("#line_departure").text(data.line_station_name);
              }
            });
          }, function () {
            handleNoGeolocation(browserSupportFlag);
          });
        }
      }

      function getNearestMetroStation(){

        if (navigator.geolocation) {
          browserSupportFlag = true;
          navigator.geolocation.getCurrentPosition(function (position) {
            initial_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

            $.ajax({
              type: "GET",
              url: "/metro_stations",
              data: { Lat: initial_location.lat(), Lng: initial_location.lng() } ,
              dataType: "json",
              success: function(data)
              {
                nearest_metro_location = new google.maps.LatLng(data.lat, data.lng);

                // Create a marker and set its position.
                var metro_marker = new google.maps.Marker({
                  map: map,
                  position: nearest_metro_location,
                  title: data.metro_name,
                  icon: icon_base + 'subway.png'
                });

                markers.push(metro_marker);
                $("#metro_departure").text(data.metro_name);
              }
            });
          }, function () {
            handleNoGeolocation(browserSupportFlag);
          });
        }
      }

        function getNearestRailStation(){

            if (navigator.geolocation) {
                browserSupportFlag = true;
                navigator.geolocation.getCurrentPosition(function (position) {
                    initial_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

                    $.ajax({
                        type: "GET",
                        url: "/rail_stations",
                        data: { Lat: initial_location.lat(), Lng: initial_location.lng() } ,
                        dataType: "json",
                        success: function(data)
                        {
                            nearest_station_location = new google.maps.LatLng(data.lat, data.lng);

                            // Create a marker and set its position.
                            var rail_marker = new google.maps.Marker({
                                map: map,
                                position: nearest_station_location,
                                title: data.rail_station_name,
                                icon: icon_base + 'rail.png'
                            });

                            markers.push(rail_marker);
                            $("#rail_departure").text(data.rail_station_name);
                        }
                    });
                }, function () {
                    handleNoGeolocation(browserSupportFlag);
                });
            }
        }

        function resetMap(){

            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }

            //=============== Marker creation ===============
            if (navigator.geolocation) {
                browserSupportFlag = true;
                navigator.geolocation.getCurrentPosition(function (position) {

                    initial_location = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                    map.setCenter(initial_location);

                    // Create a marker and set its position.
                    var marker = new google.maps.Marker({
                        map: map,
                        position: initial_location,
                        title: 'CURRENT POSITION',
                        icon: icon_base + 'homegardenbusiness.png'
                    });

                    markers.push(marker);
                }, function () {

                    handleNoGeolocation(browserSupportFlag);
                });
            }
            //===============================================

            // These methods are called in order to create 3 markers corresponding, respectively,
            // to: nearest rails station; nearest metro station; nearest line station
            getNearestRailStation();
            getNearestMetroStation();
            getNearestLineStation()
        }

        function calculateAndDisplayRoute(directionsService, directionsDisplay, lat_i, lng_i, lat_f, lng_f) {
            var selectedMode = document.getElementById('mode').value;
            directionsService.route({
                origin: {lat: lat_i, lng: lng_i},
                destination: {lat: lat_f, lng: lng_f},
                // Note that Javascript allows us to access the constant
                // using square brackets and a string value as its
                // "property."
                travelMode: google.maps.TravelMode[selectedMode]
            }, function(response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCxSHtSoH87V4MVYnxjxjiczwvDbCHSGYA&signed_in=true&libraries=places&callback=initMap"
        async defer></script>
</body>
</html>